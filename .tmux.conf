bind R source ~/.tmux.conf \; display 'config reloaded!'

#-----------------------------------------------------------------------------
# terminal
#-----------------------------------------------------------------------------

# auto-set terminal title to current window pane's title
set -g set-titles on

# enable 256-color support for pretty colorschemes in Vim
# see http://snk.tuxfamily.org/log/vim-256color-bce.html
set -g default-terminal 'xterm-256color'

# allow Vim to recieve modifier keys: Shift, Control, Alt
set -g xterm-keys on

# prevent tmux from catching modifier keys meant for Vim
set -s escape-time 0

#-----------------------------------------------------------------------------
# appearance
#-----------------------------------------------------------------------------

# Colors from the Zukitwo-Dark GTK+ theme:
# http://lassekongo83.deviantart.com/art/Zukitwo-203936861
set -g window-status-current-fg '#2c2c2c'
set -g window-status-current-bg '#c9c9c9'
set -g pane-active-border-fg blue
set -g pane-active-border-bg default
set -g pane-border-fg '#4c4c4c'
set -g pane-border-bg default
set -g status-fg '#e6e6e6'
set -g status-bg '#3c3c3c'

# Common UI interaction cues from Blueprint CSS:
# http://blueprintcss.org/tests/parts/forms.html
set -g window-status-bell-bg '#205791' # info
set -g window-status-bell-fg '#d5edf8' # info
set -g window-status-content-bg '#264409' # success
set -g window-status-content-fg '#e6efc2' # success
set -g window-status-activity-bg '#514721' # notice
set -g window-status-activity-fg '#fff6bf' # notice

#-----------------------------------------------------------------------------
# windows (views)
#-----------------------------------------------------------------------------

# create window
bind -n M-e new-window
bind -n M-E command-prompt -I '#W' "rename-window '%%'"

# focus window
bind -n M-, previous-window
bind -n M-. next-window
bind -n M-o last-window

# ... by number
set -g base-index 1
setw -g pane-base-index 1
bind -n M-0 choose-window
bind -n M-1 select-window -t :1
bind -n M-2 select-window -t :2
bind -n M-3 select-window -t :3
bind -n M-4 select-window -t :4
bind -n M-5 select-window -t :5
bind -n M-6 select-window -t :6
bind -n M-7 select-window -t :7
bind -n M-8 select-window -t :8
bind -n M-9 select-window -t :9

# swap window
bind -n M-< swap-window -t :-1
bind -n M-> swap-window -t :+1

# monitor window
bind -n M-k setw monitor-activity
bind -n M-q command-prompt -p 'monitor-silence (seconds)' -I 0 'setw monitor-silence %%'
bind -n M-j command-prompt -p 'monitor-content (fnmatch)' "setw monitor-content '%%'"
bind -n M-J setw monitor-content

#-----------------------------------------------------------------------------
# panes (clients)
#-----------------------------------------------------------------------------

# create pane
bind -n M-c split-window
bind -n M-r split-window -h

# focus pane
bind -n M-h select-pane -L
bind -n M-t select-pane -U
bind -n M-n select-pane -D
bind -n M-s select-pane -R
bind -n M-- select-pane -l

# resize pane
bind -n M-H resize-pane -L
bind -n M-T resize-pane -U
bind -n M-N resize-pane -D
bind -n M-S resize-pane -R

# detach pane
bind -n M-d break-pane -d
bind -n M-D join-pane -t -1

# rotate panes
bind -n M-a rotate-window -U
bind -n M-A rotate-window -D

# toggle maximization of current window pane
# adapted from http://superuser.com/a/433702
bind -n M-m run 'set -e;                                            \
  new_ip=$(tmux display-message -p "#I|#P");                        \
  if ! tmux select-window -t "*$new_ip"; then                       \
    old_wip=$(tmux display-message -p "#W");                        \
    old_w=${old_wip%|[0-9]*|[0-9]*};                                \
    if test "$old_w" != "$old_wip"; then                            \
      old_i=${old_wip%|*}; old_i=${old_i##*|};                      \
      old_p=${old_wip##*|};                                         \
      cur_i=$(tmux display-message -p "#I");                        \
      cur_p=$(tmux display-message -p "#P");                        \
      tmux select-window -t ":$old_i";                              \
      tmux select-pane -t ":$old_i.$old_p";                         \
      tmux swap-pane -s ":$cur_i.$cur_p";                           \
      if test "$(tmux list-panes -t ":$cur_i" | wc -l)" -le 1; then \
        tmux kill-window -t ":$cur_i";                              \
      fi;                                                           \
    else                                                            \
      new_wip="$old_wip|$new_ip";                                   \
      tmux new-window -d -n "$new_wip"                              \
        "trap : INT; while :; do echo PLACEHOLDER; cat; done";      \
      tmux swap-pane -s "$new_wip";                                 \
      tmux select-window -t "$new_wip";                             \
    fi;                                                             \
  fi;                                                               \
'

#-----------------------------------------------------------------------------
# layouts
#-----------------------------------------------------------------------------

bind -n M-w select-layout main-horizontal
bind -n M-W select-layout even-horizontal
bind -n M-v select-layout main-vertical
bind -n M-V select-layout even-vertical
bind -n M-z select-layout tiled

#-----------------------------------------------------------------------------
# scrollback buffer
#-----------------------------------------------------------------------------

# buffer length (in lines)
set -g history-limit 10000

# find in buffer
bind -n M-/ copy-mode \; send-keys ?

# move in buffer
bind -n M-u copy-mode

# copy from buffer
setw -g mode-keys vi
bind -t vi-copy v begin-selection
bind -t vi-copy C-V rectangle-toggle
bind -t vi-copy y copy-selection

# paste copied text
bind -n M-i paste-buffer
