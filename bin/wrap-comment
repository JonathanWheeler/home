#!/usr/bin/env ruby
#
# Performs word wrapping for the code comments given on STDIN.
#
# All lines are expected to have a common prefix, composed of a
# variable amount of whitespace followed by a comment marker
# (which denotes the start of a comment line).  If there is no
# such common prefix, then the leading whitespace of the first
# line is assumed to be the common prefix for subsequent lines.
#
#--
# Written in 2007 by Suraj N. Kurapati

load File.join(File.dirname(__FILE__), 'wrap-text')

def wrap_comment lines, width, *args
  # determine comment margin
  lines.first =~ /^(\s*)(\S*)/
  margin      =  $~.to_s
  space       =  $1.to_s
  marker      =  $2.to_s

  unless lines.all? {|line| line[/\S+/] == marker }
    margin = space
    marker = ''
  end

  # parse raw comment (without margin)
  comment = lines.join.gsub(/^\s*#{Regexp.escape marker}/, '')

  # format raw comment in isolation
  width  = width - margin.length
  output = wrap_text(comment, width, *args)

  # add margin to formatted comment
  output.gsub(/^/, margin)
end

if $0 == __FILE__
  require 'optparse'
  parser = OptionParser.new

  parser.on '-h', '--help', 'show this help message' do
              puts File.read(__FILE__).split(/^$/).first, nil, parser
              exit
            end

  parser.on '-w', '--width WIDTH', 'maximum line width',
            "(default: #{width = 80})", Integer do |arg| width = arg end

  parser.on '-b', '--balance', 'prefer equal line widths',
            "(default: #{balanced = false})" do |arg| balanced = arg end

  parser.on '-2', '--two-space', 'two spaces after sentences',
            "(default: #{two_space = false})" do |arg| two_space = arg end

  parser.on '-m', '--select REGEXP', 'only wrap lines that match REGEXP',
            "(default: #{(selector = //).inspect})",
            Regexp do |arg| selector = arg end

  parser.on '-M', '--reject REGEXP', 'do not wrap lines that match REGEXP',
            "(default: #{(rejector = nil).inspect})",
            Regexp do |arg| rejector = arg end

  parser.parse ARGV

  puts wrap_comment(STDIN.readlines, width, selector, rejector, true, balanced, two_space)
end
